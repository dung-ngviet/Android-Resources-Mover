/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mover;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author DungX
 */
public class MoveFrame extends javax.swing.JFrame {

  private String srcFolder;
  private String desFolder;
  private DefaultListModel<String> desModel = null;
  private DefaultListModel<String> srcModel = null;
  
  private List<String> srcFiles = new ArrayList<>();
  private List<String> desFiles = new ArrayList<>();
  
  public final String IMG_RESOURCE_REGEX = ".*\\.(png|jpg|gif|bmp)$";
  
  public final String RESOURCE_DENSITY_SEPARATOR = "-";
  
  public final String FOLDER_SEPARATOR = "/";
  
  public final String DOT = ".";
  public final String ANSI_RESET = "\\u001B[0m";
  public final String ANSI_BLACK = "\\u001B[30m";
  public final String ANSI_RED = "\\u001B[31m";
  public final String ANSI_GREEN = "\\u001B[32m";
  public final String ANSI_YELLOW = "\\u001B[33m";
  public final String ANSI_BLUE = "\\u001B[34m";
  public final String ANSI_PURPLE = "\\u001B[35m";
  public final String ANSI_CYAN = "\\u001B[36m";
  public final String ANSI_WHITE = "\\u001B[37m";
        
  /**
   * Creates new form MoveFrame
   */
  public MoveFrame() {
    initComponents();
    setDefaultLookAndFeelDecorated(true);
    initListeners();
  }

  private void initListeners() {
    initJListListener();
    setUpModelForList();
  }

  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel2 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    btnDesBrowse = new javax.swing.JButton();
    jLabel4 = new javax.swing.JLabel();
    txtDesFolder = new javax.swing.JTextField();
    jScrollPane2 = new javax.swing.JScrollPane();
    listDesMedia = new javax.swing.JList<>();
    btnDesRename = new javax.swing.JButton();
    btnDesDelete = new javax.swing.JButton();
    lblDesPreview = new javax.swing.JLabel();
    jScrollPane4 = new javax.swing.JScrollPane();
    txtDesName = new javax.swing.JTextArea();
    txtDesTail = new javax.swing.JTextField();
    jPanel3 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    btnSrcBrowse = new javax.swing.JButton();
    txtSrcFolder = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    listSrcMedia = new javax.swing.JList<>();
    btnSrcMove = new javax.swing.JButton();
    btnSrcDelete = new javax.swing.JButton();
    lblSrcPreview = new javax.swing.JLabel();
    jScrollPane3 = new javax.swing.JScrollPane();
    txtSrcName = new javax.swing.JTextArea();
    txtSrcTail = new javax.swing.JTextField();
    jScrollPane6 = new javax.swing.JScrollPane();
    txtLogging = new javax.swing.JTextPane();
    jLabel5 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Resources Mover");

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "To", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

    jLabel3.setText("Destination folder");

    btnDesBrowse.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    btnDesBrowse.setText("Browse");
    btnDesBrowse.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDesBrowseActionPerformed(evt);
      }
    });

    jLabel4.setText("Folder path:");

    jScrollPane2.setViewportView(listDesMedia);

    btnDesRename.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    btnDesRename.setText("Rename");
    btnDesRename.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDesRenameActionPerformed(evt);
      }
    });

    btnDesDelete.setText("Delete");
    btnDesDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDesDeleteActionPerformed(evt);
      }
    });

    lblDesPreview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

    txtDesName.setColumns(20);
    txtDesName.setLineWrap(true);
    txtDesName.setRows(5);
    jScrollPane4.setViewportView(txtDesName);

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel2Layout.createSequentialGroup()
        .add(5, 5, 5)
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel2Layout.createSequentialGroup()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(jLabel4)
              .add(jLabel3))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(jPanel2Layout.createSequentialGroup()
                .add(btnDesBrowse)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 217, Short.MAX_VALUE))
              .add(txtDesFolder)))
          .add(jPanel2Layout.createSequentialGroup()
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(jPanel2Layout.createSequentialGroup()
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                  .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                  .add(txtDesTail)))
              .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                  .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                    .add(btnDesRename, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(39, 39, 39))
                  .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                    .add(btnDesDelete)
                    .add(57, 57, 57))
                  .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                    .add(lblDesPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(20, 20, 20)))))))
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel2Layout.createSequentialGroup()
        .add(16, 16, 16)
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel3)
          .add(btnDesBrowse))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel4)
          .add(txtDesFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel2Layout.createSequentialGroup()
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(txtDesTail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(btnDesRename)
            .add(50, 50, 50)
            .add(btnDesDelete)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(lblDesPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(jScrollPane2))
        .addContainerGap())
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "From", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

    jLabel1.setText("Source folder");

    jLabel2.setText("Folder path:");

    btnSrcBrowse.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    btnSrcBrowse.setText("Browse");
    btnSrcBrowse.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSrcBrowseActionPerformed(evt);
      }
    });

    jScrollPane1.setViewportView(listSrcMedia);

    btnSrcMove.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    btnSrcMove.setText("Copy");
    btnSrcMove.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSrcMoveActionPerformed(evt);
      }
    });

    btnSrcDelete.setText("Delete");
    btnSrcDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSrcDeleteActionPerformed(evt);
      }
    });

    lblSrcPreview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    lblSrcPreview.setIconTextGap(0);

    txtSrcName.setColumns(20);
    txtSrcName.setLineWrap(true);
    txtSrcName.setRows(5);
    jScrollPane3.setViewportView(txtSrcName);

    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel3Layout.createSequentialGroup()
        .add(5, 5, 5)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel3Layout.createSequentialGroup()
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(jLabel2)
              .add(jLabel1))
            .add(18, 18, 18)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(btnSrcBrowse)
              .add(txtSrcFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 273, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(0, 0, Short.MAX_VALUE))
          .add(jPanel3Layout.createSequentialGroup()
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
              .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                  .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                  .add(txtSrcTail))
                .add(772, 772, 772))
              .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                  .add(jPanel3Layout.createSequentialGroup()
                    .add(27, 27, 27)
                    .add(lblSrcPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                  .add(jPanel3Layout.createSequentialGroup()
                    .add(49, 49, 49)
                    .add(btnSrcMove, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                  .add(jPanel3Layout.createSequentialGroup()
                    .add(64, 64, 64)
                    .add(btnSrcDelete)))
                .add(784, 784, 784))))))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel3Layout.createSequentialGroup()
        .add(16, 16, 16)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel1)
          .add(btnSrcBrowse))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel2)
          .add(txtSrcFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .add(18, 18, 18)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel3Layout.createSequentialGroup()
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(txtSrcTail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(btnSrcMove)
            .add(53, 53, 53)
            .add(btnSrcDelete)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 70, Short.MAX_VALUE)
            .add(lblSrcPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(jScrollPane1))
        .addContainerGap())
    );

    jScrollPane6.setViewportView(txtLogging);

    jLabel5.setText("Logging");

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .add(jLabel5)
        .add(385, 385, 385))
      .add(layout.createSequentialGroup()
        .add(12, 12, 12)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
          .add(jScrollPane6)
          .add(layout.createSequentialGroup()
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 384, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
          .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(jLabel5)
        .add(4, 4, 4)
        .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
        .addContainerGap())
    );

    jPanel2.getAccessibleContext().setAccessibleName("Destination Folder");

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void btnSrcBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrcBrowseActionPerformed
    selectFile();
  }//GEN-LAST:event_btnSrcBrowseActionPerformed

  private void btnSrcMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrcMoveActionPerformed
    if (desFolder == null || desFolder.isEmpty()) {
      JOptionPane.showMessageDialog(this, "Destination folder must be specified!", "Error", JOptionPane.OK_OPTION);
      return;
    }
    
    if (listSrcMedia.getSelectedIndex() < 0) {
      JOptionPane.showMessageDialog(this, "You must select a resource to move!", "Error", JOptionPane.OK_OPTION);
      return;
    }
    String name = txtSrcName.getText();
    
    if (name == null | name.isEmpty()) {
      JOptionPane.showMessageDialog(this, "Name must not be empty!", "Error", JOptionPane.OK_OPTION);
      return;
    }
    
    File desFol = new File(this.desFolder);
    if (!desFol.exists())
      desFol.mkdirs();
    
    String[] densityFolders = getFoldersResourceForDensities();     
    
    String srcName = listSrcMedia.getSelectedValue();
    
    String desName = txtSrcName.getText().trim() + DOT + txtSrcTail.getText().trim();
    
    boolean successs = false;
    
    String filePath = "";
    
    for (String resouceDensityPath : densityFolders) {
      File srcResourceFile = new File(srcFolder + FOLDER_SEPARATOR + resouceDensityPath + FOLDER_SEPARATOR + srcName);
      File desResourceDensity = new File(desFolder + FOLDER_SEPARATOR + resouceDensityPath);
      
      if (!srcResourceFile.exists()) {
        logError(srcFolder + "/" + resouceDensityPath + " doesn't exsists!");
        continue;
      }
      
      if (!desResourceDensity.exists()) {
        logError(desFolder + "/" + resouceDensityPath + " doesn't exsists!");
        desResourceDensity.mkdir();
      }
      
      try {
        Files.copy(srcResourceFile.toPath(), (new File(desResourceDensity.getAbsolutePath() + FOLDER_SEPARATOR + desName)).toPath(), StandardCopyOption.REPLACE_EXISTING);
        logOk("Copied from " + resouceDensityPath + FOLDER_SEPARATOR + srcName + " to " + resouceDensityPath + FOLDER_SEPARATOR + desName);
        successs = true;
      } catch (IOException ex) {
        Logger.getLogger(MoveFrame.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
    
    if (successs) {
      addToListDes(desName);
      desFiles.add(desFolder + FOLDER_SEPARATOR + RESOURCE.DRAWABLE.getType() + RESOURCE_DENSITY_SEPARATOR + DENSITY.XXXHDPI.getDensity() + FOLDER_SEPARATOR + desName);
      srcFiles.remove(listSrcMedia.getSelectedIndex());
      srcModel.remove(listSrcMedia.getSelectedIndex());
      resetNameSrc();
    }
      
  }//GEN-LAST:event_btnSrcMoveActionPerformed

    
  private void setUpModelForList() {
    desModel = new DefaultListModel<>();
    listDesMedia.setModel(desModel);

    srcModel = new DefaultListModel<>();
    listSrcMedia.setModel(srcModel);
  }
  
  private void initJListListener() {
    listSrcMedia.addListSelectionListener(new ListSelectionListener() {
      @Override
      public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
          loadImagePreview();
        }
      }
    });
    
    listDesMedia.addListSelectionListener(new ListSelectionListener() {
      @Override
      public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
          loadDesPreviewImage();
        }
      }
    });
    
  }
  
  
  private void btnDesBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesBrowseActionPerformed
    selectDesFolder();
  }//GEN-LAST:event_btnDesBrowseActionPerformed

  private void btnSrcDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrcDeleteActionPerformed
    int selectedPosition = listSrcMedia.getSelectedIndex();
    
    if (selectedPosition < 0 || selectedPosition > srcFiles.size() - 1) {
      JOptionPane.showMessageDialog(this, "Select a resource to delete!", "Error", JOptionPane.OK_OPTION);
    } else {
      String[] densityFolders = getFoldersResourceForDensities();
      String nameToDelete = listSrcMedia.getSelectedValue();
      boolean success = false;
      
      for (String densityFold: densityFolders) {
        String resourcePath = srcFolder + FOLDER_SEPARATOR + densityFold + FOLDER_SEPARATOR + nameToDelete;
        File resourceFile = new File(resourcePath);
        if (resourceFile.exists()) {
          resourceFile.delete();
          success = true;
          logOk("Delete successful: " + densityFold + FOLDER_SEPARATOR + nameToDelete );
        }
      }
      
      if (success) {
        srcFiles.remove(selectedPosition);
        srcModel.remove(selectedPosition);
        resetNameSrc();
      }
    }
  }//GEN-LAST:event_btnSrcDeleteActionPerformed

  private void btnDesRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesRenameActionPerformed
    int selectedIndex = listDesMedia.getSelectedIndex();
    
    if (desFolder == null || desFolder.isEmpty()) {
      JOptionPane.showMessageDialog(this, "Destination folder must be specified!", "Error", JOptionPane.OK_OPTION);
      return;
    }
    
    if (selectedIndex < 0) {
      JOptionPane.showMessageDialog(this, "You must select a resource to rename!", "Error", JOptionPane.OK_OPTION);
      return;
    }
    
    String newName = txtDesName.getText().trim() + DOT + txtDesTail.getText().trim();
    
    if (newName == null | newName.isEmpty()) {
      JOptionPane.showMessageDialog(this, "Name must not be empty!", "Error", JOptionPane.OK_OPTION);
      return;
    }
    
    String selectName = listDesMedia.getSelectedValue();
    if (selectName == null ? false : selectName.equals(newName)) {
      JOptionPane.showMessageDialog(this, "Name is not changed!", "Error", JOptionPane.OK_OPTION);
      return;
    }
    String[] densityFolders = getFoldersResourceForDensities();     
    
    boolean successs = false;
    
    for (String resouceDensityPath : densityFolders) {
      File resourceFile = new File(desFolder + FOLDER_SEPARATOR + resouceDensityPath + FOLDER_SEPARATOR + selectName);
      File newFile = new File(desFolder + FOLDER_SEPARATOR + resouceDensityPath + FOLDER_SEPARATOR + newName);
      
      if (resourceFile.exists()) {
        if (resourceFile.renameTo(newFile)) {
          logOk("Rename " + resouceDensityPath + FOLDER_SEPARATOR + selectName + " to " + resouceDensityPath + FOLDER_SEPARATOR + newName);
          successs = true;
        }
      }
    }
    
    if (successs) {
      desModel.set(selectedIndex, newName);
      desFiles.set(selectedIndex, desFiles.get(selectedIndex).replace(selectName, newName));
      resetNameSrc();
    }
  }//GEN-LAST:event_btnDesRenameActionPerformed

  private void btnDesDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesDeleteActionPerformed
    int selectedPosition = listDesMedia.getSelectedIndex();
    
    if (selectedPosition < 0 || selectedPosition > desFiles.size() - 1) {
      JOptionPane.showMessageDialog(this, "Select a resource to delete!", "Error", JOptionPane.OK_OPTION);
    } else {
      String[] densityFolders = getFoldersResourceForDensities();
      String nameToDelete = listDesMedia.getSelectedValue();
      boolean success = false;
      
      for (String densityFold: densityFolders) {
        String resourcePath = desFolder + FOLDER_SEPARATOR + densityFold + FOLDER_SEPARATOR + nameToDelete;
        File resourceFile = new File(resourcePath);
        if (resourceFile.exists()) {
          resourceFile.delete();
          success = true;
          logOk("Delete successful: " + densityFold + FOLDER_SEPARATOR + nameToDelete );
        }
      }
      
      if (success) {
        desFiles.remove(selectedPosition);
        desModel.remove(selectedPosition);
        resetNameDes();
      }
    }
  }//GEN-LAST:event_btnDesDeleteActionPerformed

  private void selectDesFolder() {
   JFileChooser chooser = new JFileChooser(new File("C:\\Users\\DungX\\Desktop\\Printer\\android"));
    // optionally set chooser options ...
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        File f = chooser.getSelectedFile();
        if (f.isDirectory()) {
          desFolder = f.getAbsolutePath();
          txtDesFolder.setText(desFolder);
        } else if (!f.exists()) {
          f.mkdirs();
        }
    }
  }
  
  private void addToListDes(String name) {
    desModel.addElement(name);
  }
  
  public void selectFile() {
      JFileChooser chooser = new JFileChooser();
      
      // optionally set chooser options ...
      chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
          File f = chooser.getSelectedFile();
          if (f.isDirectory()) {
            srcFolder = f.getAbsolutePath();
            txtSrcFolder.setText(srcFolder);
            FilenameFilter imageFilter = new FilenameFilter() {
              @Override
              public boolean accept(File dir, String name) {
                return name.matches("$.[(png)(jpg)(xml)]");
              }
            };
            
            File[] subDirs = f.listFiles();
            HashMap<String, String> filesMap = new HashMap<>();
            
            for (File dir: subDirs) {              
              File[] files = dir.listFiles();
              for (File file: files) {
                if (!filesMap.containsKey(file.getName())) {
                  filesMap.put(file.getName(), file.getAbsolutePath());
                } else {
                  if (dir.getName().contains("xxx")) {
                    filesMap.replace(file.getName(), file.getAbsolutePath());
                    System.out.println(filesMap.get(file.getName()));
                  }
                }
              }
            }
            String[] fileNames = new String[filesMap.keySet().size()];
            filesMap.keySet().toArray(fileNames);
            
            srcFiles.clear();
            srcFiles = new ArrayList(filesMap.values());
            srcModel.clear();
            for (String fileName: fileNames) {
              srcModel.addElement(fileName);
            }
          }
      } else {
          // user changed their mind
      }
  }
  
  private void loadDesPreviewImage() {
    int selectedIdx = listDesMedia.getSelectedIndex();
    
    if (desFiles.size() > selectedIdx && selectedIdx >= 0) {
      File file = new File(desFiles.get(selectedIdx));
      if (file.getName().matches(IMG_RESOURCE_REGEX)) {
        // Load preview image
        BufferedImage bufferedImage = null;
        
        try {
          bufferedImage = ImageIO.read(file);
          Image image = bufferedImage.getScaledInstance(lblDesPreview.getWidth(), lblDesPreview.getHeight(), Image.SCALE_SMOOTH);
          lblDesPreview.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
          System.out.println("Read image Error");
        }

        // Load name to textfield
        String name = file.getName();
        int dotPos = name.lastIndexOf(".");
        txtDesName.setText(name.substring(0, dotPos));
        txtDesTail.setText(name.substring(dotPos + 1, name.length()));
      }
    }
  }
  
  private void loadImagePreview() {
    int selectedIdx = listSrcMedia.getSelectedIndex();
    
    if (srcFiles.size() > selectedIdx && selectedIdx >= 0) {
      File file = new File(srcFiles.get(selectedIdx));
      if (file.getName().matches(IMG_RESOURCE_REGEX)) {
        // Load preview image
        BufferedImage bufferedImage = null;
        
        try {
          bufferedImage = ImageIO.read(file);
          Image image = bufferedImage.getScaledInstance(lblSrcPreview.getWidth(), lblSrcPreview.getHeight(), Image.SCALE_SMOOTH);
          lblSrcPreview.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
          System.out.println("Read image Error");
        }

        // Load name to textfield
        String name = file.getName();
        int dotPos = name.lastIndexOf(".");
        txtSrcName.setText(name.substring(0, dotPos));
        txtSrcTail.setText(name.substring(dotPos + 1, name.length()));
      }
    }
  }
  
  private String[] getFoldersResourceForDensities() {
    RESOURCE drawable = RESOURCE.DRAWABLE;
    DENSITY[] densities = DENSITY.values();
    String[] resouceFolders = new String[densities.length];
    
    for (int i = 0; i < densities.length; i++) {
      resouceFolders[i] = drawable.getType() + RESOURCE_DENSITY_SEPARATOR + densities[i].getDensity();
    }
    
    return resouceFolders;
  }
  
  
  private void logError(String content) {
    appendToPane(content + System.lineSeparator(), Color.RED);
  }
  
  private void logWarning(String content) {
    appendToPane(content + System.lineSeparator(), Color.YELLOW);
  }
   
  private void logOk(String content) {
    appendToPane(content + System.lineSeparator(), Color.GREEN);
  }
  
  private void appendToPane(String msg, Color c) {
      StyleContext sc = StyleContext.getDefaultStyleContext();
      AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

      aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
      aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

      int len = txtLogging.getDocument().getLength();
      txtLogging.setCaretPosition(len);
      txtLogging.setCharacterAttributes(aset, false);
      txtLogging.replaceSelection(msg);
  }
  
  private void resetNameSrc() {
    txtSrcName.setText("");
    txtSrcTail.setText("");
    lblSrcPreview.setIcon(null);
  }
  
  private void resetNameDes() {
    txtDesName.setText("");
    txtDesTail.setText("");
    lblDesPreview.setIcon(null);
  }
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(MoveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(MoveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(MoveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(MoveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new MoveFrame().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnDesBrowse;
  private javax.swing.JButton btnDesDelete;
  private javax.swing.JButton btnDesRename;
  private javax.swing.JButton btnSrcBrowse;
  private javax.swing.JButton btnSrcDelete;
  private javax.swing.JButton btnSrcMove;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JLabel lblDesPreview;
  private javax.swing.JLabel lblSrcPreview;
  private javax.swing.JList<String> listDesMedia;
  private javax.swing.JList<String> listSrcMedia;
  private javax.swing.JTextField txtDesFolder;
  private javax.swing.JTextArea txtDesName;
  private javax.swing.JTextField txtDesTail;
  private javax.swing.JTextPane txtLogging;
  private javax.swing.JTextField txtSrcFolder;
  private javax.swing.JTextArea txtSrcName;
  private javax.swing.JTextField txtSrcTail;
  // End of variables declaration//GEN-END:variables
}
